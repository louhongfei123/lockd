// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lockd.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type LockRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockRequest) Reset()         { *m = LockRequest{} }
func (m *LockRequest) String() string { return proto.CompactTextString(m) }
func (*LockRequest) ProtoMessage()    {}
func (*LockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_lockd_e83995a8d92c89f2, []int{0}
}
func (m *LockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LockRequest.Unmarshal(m, b)
}
func (m *LockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LockRequest.Marshal(b, m, deterministic)
}
func (dst *LockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockRequest.Merge(dst, src)
}
func (m *LockRequest) XXX_Size() int {
	return xxx_messageInfo_LockRequest.Size(m)
}
func (m *LockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LockRequest proto.InternalMessageInfo

func (m *LockRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type LockReply struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockReply) Reset()         { *m = LockReply{} }
func (m *LockReply) String() string { return proto.CompactTextString(m) }
func (*LockReply) ProtoMessage()    {}
func (*LockReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_lockd_e83995a8d92c89f2, []int{1}
}
func (m *LockReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LockReply.Unmarshal(m, b)
}
func (m *LockReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LockReply.Marshal(b, m, deterministic)
}
func (dst *LockReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockReply.Merge(dst, src)
}
func (m *LockReply) XXX_Size() int {
	return xxx_messageInfo_LockReply.Size(m)
}
func (m *LockReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LockReply.DiscardUnknown(m)
}

var xxx_messageInfo_LockReply proto.InternalMessageInfo

func (m *LockReply) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func init() {
	proto.RegisterType((*LockRequest)(nil), "pb.LockRequest")
	proto.RegisterType((*LockReply)(nil), "pb.LockReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LockdClient is the client API for Lockd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LockdClient interface {
	Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockReply, error)
}

type lockdClient struct {
	cc *grpc.ClientConn
}

func NewLockdClient(cc *grpc.ClientConn) LockdClient {
	return &lockdClient{cc}
}

func (c *lockdClient) Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockReply, error) {
	out := new(LockReply)
	err := c.cc.Invoke(ctx, "/pb.Lockd/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LockdServer is the server API for Lockd service.
type LockdServer interface {
	Lock(context.Context, *LockRequest) (*LockReply, error)
}

func RegisterLockdServer(s *grpc.Server, srv LockdServer) {
	s.RegisterService(&_Lockd_serviceDesc, srv)
}

func _Lockd_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockdServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Lockd/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockdServer).Lock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Lockd_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Lockd",
	HandlerType: (*LockdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lock",
			Handler:    _Lockd_Lock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lockd.proto",
}

func init() { proto.RegisterFile("lockd.proto", fileDescriptor_lockd_e83995a8d92c89f2) }

var fileDescriptor_lockd_e83995a8d92c89f2 = []byte{
	// 133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0xc9, 0x4f, 0xce,
	0x4e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x52, 0xe4, 0xe2, 0xf6,
	0xc9, 0x4f, 0xce, 0x0e, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0xc9, 0x4b,
	0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0x94, 0xb9, 0x38, 0x21,
	0x4a, 0x0a, 0x72, 0x2a, 0x85, 0xc4, 0xb8, 0xd8, 0x8a, 0x52, 0x8b, 0x4b, 0x73, 0x4a, 0xc0, 0x4a,
	0x38, 0x82, 0xa0, 0x3c, 0x23, 0x43, 0x2e, 0x56, 0x90, 0xa2, 0x14, 0x21, 0x0d, 0x2e, 0x16, 0x10,
	0x43, 0x88, 0x5f, 0xaf, 0x20, 0x49, 0x0f, 0xc9, 0x68, 0x29, 0x5e, 0x84, 0x40, 0x41, 0x4e, 0xa5,
	0x12, 0x43, 0x12, 0x1b, 0xd8, 0x15, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xea, 0xf6, 0xe1,
	0x3e, 0x94, 0x00, 0x00, 0x00,
}
